// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations   *Customizations `json:"customizations,omitempty"`
	Distribution     Distributions   `json:"distribution"`
	ImageDescription *string         `json:"image_description,omitempty"`
	ImageName        *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap            *OpenSCAP           `json:"openscap,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
